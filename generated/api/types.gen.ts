// This file is auto-generated by @hey-api/openapi-ts

export type ModelsCreateSubTaskRequest = {
	description?: string
	status: ModelsTaskStatus
	title: string
}

export type ModelsCreateTaskRequest = {
	due_date: string
	end_time?: string
	icon_name: string
	start_time?: string
	status: ModelsTaskStatus
	title: string
	user_ids?: Array<string>
}

export type ModelsErrorResponse = {
	error?: string
}

export type ModelsMessageResponse = {
	message?: string
}

export type ModelsSubTask = {
	created_at?: string
	description?: string
	id?: string
	status?: ModelsTaskStatus
	task_id?: string
	title?: string
	updated_at?: string
}

export type ModelsSubTasksResponse = {
	subtasks?: Array<ModelsSubTask>
}

export type ModelsTask = {
	attachments?: number
	comments?: number
	created_at?: string
	due_date: string
	end_time?: string
	icon_name: string
	id: string
	links?: number
	progress: number
	start_time?: string
	status: ModelsTaskStatus
	sub_tasks?: Array<ModelsSubTask>
	title: string
	updated_at?: string
	users?: Array<ModelsUser>
}

export type ModelsTaskStatus = 'not-started' | 'completed' | 'in-progress'

export type ModelsTasksResponse = {
	tasks?: Array<ModelsTask>
}

export type ModelsUpdateSubTaskRequest = {
	description?: string
	status?: ModelsTaskStatus
	title?: string
}

export type ModelsUpdateTaskRequest = {
	attachments?: number
	comments?: number
	due_date?: string
	end_time?: string
	icon_name?: string
	links?: number
	progress?: number
	start_time?: string
	status?: ModelsTaskStatus
	title?: string
}

export type ModelsUser = {
	id: string
	name?: string
	src?: string
}

export type DeleteSubtasksByIdData = {
	body?: never
	path: {
		/**
		 * Subtask ID
		 */
		id: string
	}
	query?: never
	url: '/subtasks/{id}'
}

export type DeleteSubtasksByIdErrors = {
	/**
	 * Not Found
	 */
	404: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type DeleteSubtasksByIdError = DeleteSubtasksByIdErrors[keyof DeleteSubtasksByIdErrors]

export type DeleteSubtasksByIdResponses = {
	/**
	 * OK
	 */
	200: ModelsMessageResponse
}

export type DeleteSubtasksByIdResponse =
	DeleteSubtasksByIdResponses[keyof DeleteSubtasksByIdResponses]

export type PutSubtasksByIdData = {
	/**
	 * Updated subtask details
	 */
	body: ModelsUpdateSubTaskRequest
	path: {
		/**
		 * Subtask ID
		 */
		id: string
	}
	query?: never
	url: '/subtasks/{id}'
}

export type PutSubtasksByIdErrors = {
	/**
	 * Bad Request
	 */
	400: ModelsErrorResponse
	/**
	 * Not Found
	 */
	404: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type PutSubtasksByIdError = PutSubtasksByIdErrors[keyof PutSubtasksByIdErrors]

export type PutSubtasksByIdResponses = {
	/**
	 * OK
	 */
	200: ModelsSubTask
}

export type PutSubtasksByIdResponse = PutSubtasksByIdResponses[keyof PutSubtasksByIdResponses]

export type GetTasksData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by status
		 */
		status?: string
		/**
		 * Filter by priority
		 */
		priority?: string
		/**
		 * Limit number of tasks returned (default: 50)
		 */
		limit?: number
		/**
		 * Offset for pagination
		 */
		offset?: number
	}
	url: '/tasks'
}

export type GetAllTasksParams = {
	status?: string
	sort_by?: 'due_date' | 'title' | 'created_at'
	sort_type?: 'asc' | 'desc'
	limit?: number
	offset?: number
}

export type GetTasksErrors = {
	/**
	 * Bad Request
	 */
	400: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type GetTasksError = GetTasksErrors[keyof GetTasksErrors]

export type GetTasksResponses = {
	/**
	 * OK
	 */
	200: ModelsTasksResponse
}

export type GetTasksResponse = GetTasksResponses[keyof GetTasksResponses]

export type ModelsCreateTaskRequestPostTasksData = {
	/**
	 * Task details
	 */
	body: ModelsCreateTaskRequest
	path?: never
	query?: never
	url: '/tasks'
}

export type PostTasksErrors = {
	/**
	 * Bad Request
	 */
	400: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type PostTasksError = PostTasksErrors[keyof PostTasksErrors]

export type PostTasksResponses = {
	/**
	 * Created
	 */
	201: ModelsTask
}

export type PostTasksResponse = PostTasksResponses[keyof PostTasksResponses]

export type DeleteTasksByIdData = {
	body?: never
	path: {
		/**
		 * Task ID
		 */
		id: string
	}
	query?: never
	url: '/tasks/{id}'
}

export type DeleteTasksByIdErrors = {
	/**
	 * Not Found
	 */
	404: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type DeleteTasksByIdError = DeleteTasksByIdErrors[keyof DeleteTasksByIdErrors]

export type DeleteTasksByIdRequest = {
	id: string
}

export type DeleteTasksByIdResponses = {
	/**
	 * OK
	 */
	200: ModelsMessageResponse
}

export type DeleteTasksByIdResponse = DeleteTasksByIdResponses[keyof DeleteTasksByIdResponses]

export type GetTasksByIdData = {
	body?: never
	path: {
		/**
		 * Task ID
		 */
		id: string
	}
	query?: never
	url: '/tasks/{id}'
}

export type GetTasksByIdErrors = {
	/**
	 * Not Found
	 */
	404: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type GetTasksByIdError = GetTasksByIdErrors[keyof GetTasksByIdErrors]

export type GetTasksByIdResponses = {
	/**
	 * OK
	 */
	200: ModelsTask
}

export type GetTasksByIdRequest = { id: string }
export type GetTasksByIdResponse = GetTasksByIdResponses[keyof GetTasksByIdResponses]

export type PutTasksByIdData = {
	/**
	 * Updated task details
	 */
	body: ModelsUpdateTaskRequest
	path: {
		/**
		 * Task ID
		 */
		id: string
	}
	query?: never
	url: '/tasks/{id}'
}

export type PutTasksByIdErrors = {
	/**
	 * Bad Request
	 */
	400: ModelsErrorResponse
	/**
	 * Not Found
	 */
	404: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type PutTasksByIdError = PutTasksByIdErrors[keyof PutTasksByIdErrors]

export type PutTasksByIdResponses = {
	/**
	 * OK
	 */
	200: ModelsTask
}

export type PutTasksByIdResponse = PutTasksByIdResponses[keyof PutTasksByIdResponses]

export type GetTasksByIdSubtasksData = {
	body?: never
	path: {
		/**
		 * Task ID
		 */
		id: string
	}
	query?: never
	url: '/tasks/{id}/subtasks'
}

export type GetTasksByIdSubtasksErrors = {
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type GetTasksByIdSubtasksError = GetTasksByIdSubtasksErrors[keyof GetTasksByIdSubtasksErrors]

export type GetTasksByIdSubtasksResponses = {
	/**
	 * OK
	 */
	200: ModelsSubTasksResponse
}

export type GetTasksByIdSubtasksResponse =
	GetTasksByIdSubtasksResponses[keyof GetTasksByIdSubtasksResponses]

export type PostTasksByIdSubtasksData = {
	/**
	 * Subtask details
	 */
	body: ModelsCreateSubTaskRequest
	path: {
		/**
		 * Task ID
		 */
		id: string
	}
	query?: never
	url: '/tasks/{id}/subtasks'
}

export type PostTasksByIdSubtasksErrors = {
	/**
	 * Bad Request
	 */
	400: ModelsErrorResponse
	/**
	 * Internal Server Error
	 */
	500: ModelsErrorResponse
}

export type PostTasksByIdSubtasksError =
	PostTasksByIdSubtasksErrors[keyof PostTasksByIdSubtasksErrors]

export type PostTasksByIdSubtasksResponses = {
	/**
	 * Created
	 */
	201: ModelsSubTask
}

export type PostTasksByIdSubtasksResponse =
	PostTasksByIdSubtasksResponses[keyof PostTasksByIdSubtasksResponses]

export type ClientOptions = {
	baseUrl: 'http://localhost:8080/api/v1' | 'https://localhost:8080/api/v1' | (string & {})
}
